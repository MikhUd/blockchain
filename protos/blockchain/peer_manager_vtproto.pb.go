// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.5.0
// source: peer_manager.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerManagerClient is the client API for PeerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerManagerClient interface {
	Receive(ctx context.Context, opts ...grpc.CallOption) (PeerManager_ReceiveClient, error)
}

type peerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerManagerClient(cc grpc.ClientConnInterface) PeerManagerClient {
	return &peerManagerClient{cc}
}

func (c *peerManagerClient) Receive(ctx context.Context, opts ...grpc.CallOption) (PeerManager_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerManager_ServiceDesc.Streams[0], "/blockchain.PeerManager/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerManagerReceiveClient{stream}
	return x, nil
}

type PeerManager_ReceiveClient interface {
	Send(*BlockchainMessage) error
	Recv() (*BlockchainMessage, error)
	grpc.ClientStream
}

type peerManagerReceiveClient struct {
	grpc.ClientStream
}

func (x *peerManagerReceiveClient) Send(m *BlockchainMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerManagerReceiveClient) Recv() (*BlockchainMessage, error) {
	m := new(BlockchainMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerManagerServer is the server API for PeerManager service.
// All implementations must embed UnimplementedPeerManagerServer
// for forward compatibility
type PeerManagerServer interface {
	Receive(PeerManager_ReceiveServer) error
	mustEmbedUnimplementedPeerManagerServer()
}

// UnimplementedPeerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPeerManagerServer struct {
}

func (UnimplementedPeerManagerServer) Receive(PeerManager_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedPeerManagerServer) mustEmbedUnimplementedPeerManagerServer() {}

// UnsafePeerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerManagerServer will
// result in compilation errors.
type UnsafePeerManagerServer interface {
	mustEmbedUnimplementedPeerManagerServer()
}

func RegisterPeerManagerServer(s grpc.ServiceRegistrar, srv PeerManagerServer) {
	s.RegisterService(&PeerManager_ServiceDesc, srv)
}

func _PeerManager_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerManagerServer).Receive(&peerManagerReceiveServer{stream})
}

type PeerManager_ReceiveServer interface {
	Send(*BlockchainMessage) error
	Recv() (*BlockchainMessage, error)
	grpc.ServerStream
}

type peerManagerReceiveServer struct {
	grpc.ServerStream
}

func (x *peerManagerReceiveServer) Send(m *BlockchainMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerManagerReceiveServer) Recv() (*BlockchainMessage, error) {
	m := new(BlockchainMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerManager_ServiceDesc is the grpc.ServiceDesc for PeerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.PeerManager",
	HandlerType: (*PeerManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _PeerManager_Receive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer_manager.proto",
}
